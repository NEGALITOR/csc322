     1                                  ; TAHA TAS
     2                                  ; Program 4: Fibonacci Sequence
     3                                  ; 10/7/2022
     4                                  ; Creates the Fibonacci Sequence up to 610 with an array of size 32 bits
     5                                  
     6                                  SECTION .data
     7                                  ; define data/variables here.  Think DB, DW, DD, DQ
     8                                  
     9                                  SECTION .bss
    10                                  ; define uninitialized data here
    11                                  
    12 00000000 <res 00000020>          Fibs: RESW 16 ;Reserves space so 16 words can fit in array (32 bits)
    13                                  
    14                                  SECTION .text
    15                                  global _main
    16                                  _main:
    17                                  
    18                                  ; put your code here.
    19                                  
    20 00000000 66C705[00000000]00-     mov word[Fibs + 0 * 2], 0
    21 00000008 00                 
    22 00000009 66C705[02000000]01-     mov word[Fibs + 1 * 2], 1
    23 00000011 00                 
    24 00000012 66A1[00000000]          mov ax, [Fibs]
    25 00000018 660305[02000000]        add ax, [Fibs + 1 * 2]
    26                                  ;ax = 1
    27                                  
    28 0000001F 66A3[04000000]          mov word[Fibs + 2 * 2], ax
    29 00000025 660305[02000000]        add ax, [Fibs + 1 * 2]
    30                                  ;ax = 2
    31                                  
    32 0000002C 66A3[06000000]          mov word[Fibs + 3 * 2], ax
    33 00000032 660305[04000000]        add ax, [Fibs + 2 * 2]
    34                                  ;ax = 3
    35                                  
    36 00000039 66A3[08000000]          mov word[Fibs + 4 * 2], ax
    37 0000003F 660305[06000000]        add ax, [Fibs + 3 * 2]
    38                                  ;ax = 5
    39                                  
    40 00000046 66A3[0A000000]          mov word[Fibs + 5 * 2], ax
    41 0000004C 660305[08000000]        add ax, [Fibs + 4 * 2]
    42                                  ;ax = 8
    43                                  
    44 00000053 66A3[0C000000]          mov word[Fibs + 6 * 2], ax
    45 00000059 660305[0A000000]        add ax, [Fibs + 5 * 2]
    46                                  ;ax = 13
    47                                  
    48 00000060 66A3[0E000000]          mov word[Fibs + 7 * 2], ax
    49 00000066 660305[0C000000]        add ax, [Fibs + 6 * 2]
    50                                  ;ax = 21
    51                                  
    52 0000006D 66A3[10000000]          mov word[Fibs + 8 * 2], ax
    53 00000073 660305[0E000000]        add ax, [Fibs + 7 * 2]
    54                                  ;ax = 34
    55                                  
    56 0000007A 66A3[12000000]          mov word[Fibs + 9 * 2], ax
    57 00000080 660305[10000000]        add ax, [Fibs + 8 * 2]
    58                                  ;ax = 55
    59                                  
    60 00000087 66A3[14000000]          mov word[Fibs + 10 * 2], ax
    61 0000008D 660305[12000000]        add ax, [Fibs + 9 * 2]
    62                                  ;ax = 89
    63                                  
    64 00000094 66A3[16000000]          mov word[Fibs + 11 * 2], ax
    65 0000009A 660305[14000000]        add ax, [Fibs + 10 * 2]
    66                                  ;ax = 144
    67                                  
    68 000000A1 66A3[18000000]          mov word[Fibs + 12 * 2], ax
    69 000000A7 660305[16000000]        add ax, [Fibs + 11 * 2]
    70                                  ;ax = 233
    71                                  
    72 000000AE 66A3[1A000000]          mov word[Fibs + 13 * 2], ax
    73 000000B4 660305[18000000]        add ax, [Fibs + 12 * 2]
    74                                  ;ax = 377
    75                                  
    76 000000BB 66A3[1C000000]          mov word[Fibs + 14 * 2], ax
    77 000000C1 660305[1A000000]        add ax, [Fibs + 13 * 2]
    78                                  ;ax = 610
    79                                  
    80 000000C8 66A3[1E000000]          mov word[Fibs + 15 * 2], ax
    81                                  
    82                                  lastBreak:
    83                                  
    84                                  ; Normal termination code
    85 000000CE B801000000              mov eax, 1
    86 000000D3 BB00000000              mov ebx, 0
    87 000000D8 CD80                    int 80h
