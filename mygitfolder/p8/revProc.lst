     1                                  ; TAHA TAS
     2                                  ; Program 8: Reverse Array with a Proc
     3                                  ; Nov 18, 2022
     4                                  ; Reverses array by utilizing a macro procedure
     5                                  
     6                                  %macro ReverseArr 2
     7                                  
     8                                    mov ecx, (%2/4)-1
     9                                    mov edx, 0
    10                                  
    11                                    %1loop:
    12                                      mov eax, [%1 + 4*edx]
    13                                      mov ebx, [%1 + 4*ecx]
    14                                      
    15                                      mov [%1 + 4*edx], ebx
    16                                      mov [%1 + 4*ecx], eax
    17                                  
    18                                      inc edx
    19                                      dec ecx
    20                                      
    21                                      cmp ecx, edx
    22                                  
    23                                      jl %1exit
    24                                      jne %1loop
    25                                    %1exit:
    26                                  
    27                                  %endmacro
    28                                  
    29                                  
    30                                  
    31                                  SECTION .data
    32 00000000 010000000200000003-     array1: dd      1,2,3,4,5
    33 00000009 000000040000000500-
    34 00000012 0000               
    35                                  len1:   EQU     ($-array1)
    36                                  
    37                                  
    38 00000014 F6FFFFFFF7FFFFFFF8-     array2: dd      -10, -9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9
    39 0000001D FFFFFFF9FFFFFFFAFF-
    40 00000026 FFFFFBFFFFFFFCFFFF-
    41 0000002F FFFDFFFFFFFEFFFFFF-
    42 00000038 FFFFFFFF0000000001-
    43 00000041 000000020000000300-
    44 0000004A 000004000000050000-
    45 00000053 000600000007000000-
    46 0000005C 0800000009000000   
    47                                  len2:   EQU     ($-array2)
    48                                  
    49                                  
    50 00000064 000000000A00000014-     array3: dd  0,10,20,30,40,50,60,70,80,90
    51 0000006D 0000001E0000002800-
    52 00000076 0000320000003C0000-
    53 0000007F 004600000050000000-
    54 00000088 5A000000           
    55 0000008C 640000006E00000078-             dd  100,110,120,130,140,150,160,170,180,190
    56 00000095 000000820000008C00-
    57 0000009E 000096000000A00000-
    58 000000A7 00AA000000B4000000-
    59 000000B0 BE000000           
    60 000000B4 C8000000D2000000DC-             dd  200,210,220,230,240,250,260,270,280,290
    61 000000BD 000000E6000000F000-
    62 000000C6 0000FA000000040100-
    63 000000CF 000E01000018010000-
    64 000000D8 22010000           
    65 000000DC 2C0100003601000040-             dd  300,310,320,330,340,350,360,370,380,390
    66 000000E5 0100004A0100005401-
    67 000000EE 00005E010000680100-
    68 000000F7 00720100007C010000-
    69 00000100 86010000           
    70 00000104 900100009A010000A4-             dd  400,410,420,430,440,450,460,470,480,490,500
    71 0000010D 010000AE010000B801-
    72 00000116 0000C2010000CC0100-
    73 0000011F 00D6010000E0010000-
    74 00000128 EA010000F4010000   
    75                                  len3:   EQU     ($-array3)
    76                                  
    77                                  
    78                                  SECTION .bss
    79                                  ; define uninitialized data here
    80                                  
    81                                  SECTION .text
    82                                  global _main
    83                                  _main:
    84                                  
    85                                  ReverseArr array1,len1
    86                              <1> 
    87 00000000 B904000000          <1>  mov ecx, (%2/4)-1
    88 00000005 BA00000000          <1>  mov edx, 0
    89                              <1> 
    90                              <1>  %1loop:
    91 0000000A 8B0495[00000000]    <1>  mov eax, [%1 + 4*edx]
    92 00000011 8B1C8D[00000000]    <1>  mov ebx, [%1 + 4*ecx]
    93                              <1> 
    94 00000018 891C95[00000000]    <1>  mov [%1 + 4*edx], ebx
    95 0000001F 89048D[00000000]    <1>  mov [%1 + 4*ecx], eax
    96                              <1> 
    97 00000026 42                  <1>  inc edx
    98 00000027 49                  <1>  dec ecx
    99                              <1> 
   100 00000028 39D1                <1>  cmp ecx, edx
   101                              <1> 
   102 0000002A 7C02                <1>  jl %1exit
   103 0000002C 75DC                <1>  jne %1loop
   104                              <1>  %1exit:
   105                              <1> 
   106                                  ReverseArr array2,len2
   107                              <1> 
   108 0000002E B913000000          <1>  mov ecx, (%2/4)-1
   109 00000033 BA00000000          <1>  mov edx, 0
   110                              <1> 
   111                              <1>  %1loop:
   112 00000038 8B0495[14000000]    <1>  mov eax, [%1 + 4*edx]
   113 0000003F 8B1C8D[14000000]    <1>  mov ebx, [%1 + 4*ecx]
   114                              <1> 
   115 00000046 891C95[14000000]    <1>  mov [%1 + 4*edx], ebx
   116 0000004D 89048D[14000000]    <1>  mov [%1 + 4*ecx], eax
   117                              <1> 
   118 00000054 42                  <1>  inc edx
   119 00000055 49                  <1>  dec ecx
   120                              <1> 
   121 00000056 39D1                <1>  cmp ecx, edx
   122                              <1> 
   123 00000058 7C02                <1>  jl %1exit
   124 0000005A 75DC                <1>  jne %1loop
   125                              <1>  %1exit:
   126                              <1> 
   127                                  ReverseArr array3,len3
   128                              <1> 
   129 0000005C B932000000          <1>  mov ecx, (%2/4)-1
   130 00000061 BA00000000          <1>  mov edx, 0
   131                              <1> 
   132                              <1>  %1loop:
   133 00000066 8B0495[64000000]    <1>  mov eax, [%1 + 4*edx]
   134 0000006D 8B1C8D[64000000]    <1>  mov ebx, [%1 + 4*ecx]
   135                              <1> 
   136 00000074 891C95[64000000]    <1>  mov [%1 + 4*edx], ebx
   137 0000007B 89048D[64000000]    <1>  mov [%1 + 4*ecx], eax
   138                              <1> 
   139 00000082 42                  <1>  inc edx
   140 00000083 49                  <1>  dec ecx
   141                              <1> 
   142 00000084 39D1                <1>  cmp ecx, edx
   143                              <1> 
   144 00000086 7C02                <1>  jl %1exit
   145 00000088 75DC                <1>  jne %1loop
   146                              <1>  %1exit:
   147                              <1> 
   148                                  
   149                                  lastBreak:
   150                                  ; Normal termination code
   151 0000008A B801000000              mov eax, 1
   152 0000008F BB00000000              mov ebx, 0
   153 00000094 CD80                    int 80h
